lowlingModel = importPARAFAC("../5. Microbiome modeling/20230605_run/PARAFAC models/Low_ling", microb_featureNames, microb_days, "asv")
lowinterModel = importPARAFAC("../5. Microbiome modeling/20230605_run/PARAFAC models/Low_inter", microb_featureNames, microb_days, "asv")
uplingModel = importPARAFAC("../5. Microbiome modeling/20230605_run/PARAFAC models/Up_ling", microb_featureNames, microb_days, "asv")
upinterModel = importPARAFAC("../5. Microbiome modeling/20230605_run/PARAFAC models/Up_inter", microb_featureNames, microb_days, "asv")
salivaModel = importPARAFAC("../5. Microbiome modeling/20230605_run/PARAFAC models/Saliva", microb_featureNames, microb_days, "asv")
metabolomicsModel = importPARAFAC("../6. Metabolome modeling/20230605_run/PARAFAC models/Metabolomics", metab_featureNames, metab_days, "BIOCHEMICAL")
HOMD_mapping = read.csv("../0. Raw data input/homd_result.csv") %>% as_tibble() %>% select(-X)
set.seed(1)
varexp_subjects = function(model){
varExps = apply(model[[4]]^2, 1, function(x){sum(x, na.rm=TRUE)}) / apply(model[[5]]^2, 1,  function(x){sum(x, na.rm=TRUE)})
result = cbind(model[[1]]$subject, varExps) %>% as_tibble()
result$varExps = as.numeric(result$varExps)
colnames(result) = c("subject", "varExps")
return(result)
}
varexp_features = function(model, featureNameColumnName){
varExps = apply(model[[6]]^2, 2, function(x){sum(x, na.rm=TRUE)}) / apply(model[[7]]^2, 2, function(x){sum(x, na.rm=TRUE)})
result = cbind(model[[2]][featureNameColumnName] %>% pull(), varExps) %>% as_tibble()
result$varExps = as.numeric(result$varExps)
colnames(result) = c(featureNameColumnName, "varExps")
return(result)
}
congruence_subjects = function(model){
numComponents = ncol(model[[3]]) - 1
numSubjects = nrow(model[[1]])
result = matrix(0, nrow=numSubjects, ncol=numComponents)
for(i in 1:numSubjects){
subjectName = model[[1]] %>% select(subject) %>% pull()
subjectName = subjectName[i]
Xi = model[[7]] %>% mutate(subject = rep(model[[1]]$subject, nrow(model[[3]]))) %>% filter(subject == subjectName) %>% select(-subject) %>% t() %>% as_tibble()
vectXi = Xi %>% pivot_longer(everything()) %>% select(value)
for(j in 1:numComponents){
b = model[[2]][,j] %>% pull()
c = model[[3]][,j] %>% pull()
top = sum((b %*% t(c)) * Xi)
bottom = sqrt(sum(b * t(b)) * sum(c * t(c)) * sum(vectXi * t(vectXi)))
result[i,j] = top / bottom
}
}
row.names(result) = model[[1]]$subject
colnames(result) = paste0("Congruence_", 1:numComponents)
return(result)
}
congruence_features = function(model, featureNameColumnName){
numComponents = ncol(model[[3]]) - 1
numFeatures = nrow(model[[2]])
result = matrix(0, nrow=numFeatures, ncol=numComponents)
for(i in 1:numFeatures){
featureName = model[[2]] %>% select(featureNameColumnName) %>% pull()
featureName = featureName[i]
Xi = model[[5]] %>% select(starts_with(paste0(featureName, "_")))
vectXi = Xi %>% pivot_longer(everything()) %>% select(value)
for(j in 1:numComponents){
a = model[[1]][,j] %>% pull()
a = a / norm(a)
c = model[[3]][,j] %>% pull()
top = sum((a %*% t(c)) * Xi)
bottom = sqrt(sum(a * t(a)) * sum(c * t(c)) * sum(vectXi * t(vectXi)))
result[i,j] = top / bottom
}
}
colnames(result) = paste0("Congruence_", 1:numComponents)
return(result)
}
filterFeatures = function(model, varExpMultiplier){
modelVarExp = sum(model[[6]]^2, na.rm=TRUE) / sum(model[[7]]^2, na.rm=TRUE)
wellModeledFeatures = apply(model[[6]]^2, 2, function(x){sum(x, na.rm=TRUE)}) / apply(model[[7]]^2, 2, function(x){sum(x, na.rm=TRUE)}) > (varExpMultiplier*modelVarExp)
result = cbind(colnames(model[[6]]), as.logical(as.numeric(wellModeledFeatures))) %>% as_tibble()
colnames(result) = c("featureName", "keep")
return(result)
}
filterByCongruence = function(congruenceOutput, labels, labelName, threshold=0.5){
numComponents = ncol(congruenceOutput)
if(numComponents == 1){
keep1 = abs(congruenceOutput[,1]) > threshold
keep2 = FALSE
}
else{
keep1 = abs(congruenceOutput[,1]) > threshold
keep2 = abs(congruenceOutput[,2]) > threshold
}
result = labels %>% as_tibble() %>% mutate(keep = (keep1 | keep2))
colnames(result) = c(labelName, "keep")
return(result)
}
clusterFeatureLoadings_filtered = function(model, filteredFeatures, numClusters){
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("asv" = "featureName")) %>% filter(keep == 1)
result = df
if(numComponents==1){
df = df %>% select(Component_1) %>% as.matrix()
}
else{
df = df %>% select(Component_1, Component_2) %>% as.matrix()
}
result$group = kmeans(df, numClusters, nstart=50)$cluster
result = result %>% left_join(HOMD_mapping)
return(result)
}
clusterSubjectLoadings_filtered = function(model, filteredSubjects, numClusters){
numComponents = ncol(model[[3]]) - 1
df = model[[1]] %>% left_join(filteredSubjects) %>% filter(keep == 1)
result = df
if(numComponents==1){
df = df %>% select(Component_1) %>% as.matrix()
}
else{
df = df %>% select(Component_1, Component_2) %>% as.matrix()
}
result$group = kmeans(df, numClusters, nstart=50)$cluster
return(result)
}
featureLoadingLoadingPlot_varExp = function(model, title){
numComponents = ncol(model[[3]]) - 1
varExps = apply(model[[6]]^2, 2, function(x){sum(x, na.rm=TRUE)}) / apply(model[[7]]^2, 2, function(x){sum(x, na.rm=TRUE)}) * 100
df = model[[2]] %>% mutate(varExp = varExps)
if(numComponents == 1){
plot = model[[2]] %>% ggplot(aes(x=Component_1,y=0,col=varExps)) + geom_point() + scale_color_gradient2(low="blue", mid="purple", high="red", midpoint=50, breaks=seq(0,100,100), limits=c(0,100)) + ggtitle(title)
}
else{
plot = model[[2]] %>% ggplot(aes(x=Component_1,y=Component_2,col=varExps)) + geom_point() + scale_color_gradient2(low="blue", mid="purple", high="red", midpoint=50, breaks=seq(0,100,100), limits=c(0,100)) + ggtitle(title)
}
return(plot)
}
featureLoadingLoadingPlot_filtered = function(model, filteredFeatures, title){
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("asv" = "featureName"))
if(numComponents == 1){
plot = df %>% ggplot(aes(x=Component_1,y=0,col=as.factor(keep))) + geom_point() + ggtitle(title)
}
else{
plot = df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
}
return(plot)
}
subjectLoadingLoadingPlot_varExp = function(model, title){
numComponents = ncol(model[[3]]) - 1
varExps = apply(model[[4]]^2, 1, function(x){sum(x, na.rm=TRUE)}) / apply(model[[5]]^2, 1, function(x){sum(x, na.rm=TRUE)}) * 100
df = model[[1]] %>% mutate(varExp = varExps)
if(numComponents == 1){
plot = model[[1]] %>% ggplot(aes(x=Component_1,y=0,col=varExps)) + geom_point() + scale_color_gradient2(low="blue", mid="purple", high="red", midpoint=50, breaks=seq(0,100,100), limits=c(0,100)) + ggtitle(title)
}
else{
plot = model[[1]] %>% ggplot(aes(x=Component_1,y=Component_2,col=varExps)) + geom_point() + scale_color_gradient2(low="blue", mid="purple", high="red", midpoint=50, breaks=seq(0,100,100), limits=c(0,100)) + ggtitle(title)
}
return(plot)
}
subjectLoadingLoadingPlot_filtered = function(model, filteredSubjects, title){
numComponents = ncol(model[[3]]) - 1
df = model[[1]] %>% left_join(filteredSubjects)
if(numComponents == 1){
plot = df %>% ggplot(aes(x=Component_1,y=0,col=as.factor(keep))) + geom_point() + ggtitle(title)
}
else{
plot = df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
}
return(plot)
}
featureLoadingLoadingPlot = function(model, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents == 1){
plot = model[[2]] %>% ggplot(aes(x=Component_1,y=0)) + geom_point() + ggtitle(title)
}
else{
plot = model[[2]] %>% ggplot(aes(x=Component_1,y=Component_2)) + geom_point() + ggtitle(title)
}
return(plot)
}
subjectLoadingLoadingPlot = function(model, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents == 1){
plot = model[[1]] %>% ggplot(aes(x=Component_1,y=0)) + geom_point() + ggtitle(title)
}
else{
plot = model[[1]] %>% ggplot(aes(x=Component_1,y=Component_2)) + geom_point() + ggtitle(title)
}
return(plot)
}
timeLoadingLoadingPlot = function(model, title){
numComponents = ncol(model[[3]]) - 1
modelVarExp = sum(model[[6]]^2) / sum(model[[7]]^2)
if(numComponents == 1){
plot = model[[3]] %>% ggplot(aes(x=Component_1,y=0,label=days)) + geom_path() + geom_text() + ggtitle(title)
}
else{
plot = model[[3]] %>% ggplot(aes(x=Component_1,y=Component_2,label=days)) + geom_path() + geom_text() + ggtitle(title)
}
return(plot)
}
congruencePlot_subjects = function(congruenceOutput, model, title){
numComponents = ncol(congruenceOutput)
modelledData = model[[4]]
inputData = model[[5]]
modelVarExp = sum(modelledData^2, na.rm=TRUE) / sum(inputData^2, na.rm=TRUE)
subjectVarExp = apply(modelledData^2, 1, function(x){sum(x, na.rm=TRUE)}) / apply(inputData^2, 1, function(x){sum(x, na.rm=TRUE)})
square_small = matrix(c(-0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5), nrow=5, ncol=2) %>% as_tibble()
colnames(square_small) = c("x", "y")
square_large = matrix(c(-1,-1,1,1,-1,-1,1,1,-1,-1), nrow=5, ncol=2) %>% as_tibble()
colnames(square_large) = c("x", "y")
data = congruenceOutput %>% as_tibble() %>% mutate(normVarExp = (subjectVarExp / modelVarExp) - 1)
if(numComponents == 2){
plot = ggplot() + geom_point(data=data, aes(x=Congruence_1,y=Congruence_2,col=normVarExp)) + xlim(-1,1) + ylim(-1,1) + geom_path(aes(x=x,y=y), data=square_small) + geom_path(aes(x=x,y=y), data=square_large) + ggtitle(title)
}
else{
plot = ggplot() + geom_point(data=data, aes(x=Congruence_1,y=0,col=normVarExp)) + xlim(-1,1) + ylim(-1,1) + geom_vline(xintercept=0.5) + geom_vline(xintercept=-0.5) + geom_vline(xintercept=1) + geom_vline(xintercept=-1) + ggtitle(title)
}
return(plot)
}
congruencePlot_features = function(congruenceOutput, model, title){
numComponents = ncol(congruenceOutput)
modelledData = model[[6]]
inputData = model[[7]]
modelVarExp = sum(modelledData^2, na.rm=TRUE) / sum(inputData^2, na.rm=TRUE)
featureVarExp = apply(modelledData^2, 2, function(x){sum(x, na.rm=TRUE)}) / apply(inputData^2, 2, function(x){sum(x, na.rm=TRUE)})
square_small = matrix(c(-0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5), nrow=5, ncol=2) %>% as_tibble()
colnames(square_small) = c("x", "y")
square_large = matrix(c(-1,-1,1,1,-1,-1,1,1,-1,-1), nrow=5, ncol=2) %>% as_tibble()
colnames(square_large) = c("x", "y")
data = congruenceOutput %>% as_tibble() %>% mutate(normVarExp = (featureVarExp / modelVarExp) - 1)
if(numComponents == 2){
plot = ggplot() + geom_point(data=data, aes(x=Congruence_1,y=Congruence_2,col=normVarExp)) + xlim(-1,1) + ylim(-1,1) + geom_path(aes(x=x,y=y), data=square_small) + geom_path(aes(x=x,y=y), data=square_large) + ggtitle(title)
}
else{
plot = ggplot() + geom_point(data=data, aes(x=Congruence_1,y=0,col=normVarExp)) + xlim(-1,1) + ylim(-1,1) + geom_vline(xintercept=0.5) + geom_vline(xintercept=-0.5) + geom_vline(xintercept=1) + geom_vline(xintercept=-1) + ggtitle(title)
}
return(plot)
}
plotSubjectClustering = function(model, subjectClustering, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents==1){
plot = subjectClustering %>% ggplot(aes(x=Component_1,y=0,col=as.factor(group))) + geom_point() + geom_vline(xintercept=0, linetype=2) + ggtitle(title)
}
else{
plot = subjectClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(group))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
}
return(plot)
}
plotSubjectClustering_meta = function(model, subjectClustering, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents==1){
plot = subjectClustering %>% ggplot(aes(x=Component_1,y=0,col=as.factor(RFgroup))) + geom_point() + geom_vline(xintercept=0, linetype=2) + ggtitle(title)
}
else{
plot = subjectClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(RFgroup))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
}
return(plot)
}
plotResponsePerSubjectGroup = function(model, featureClusteringResult, subjectClusteringResult, subjectGroup){
numFeatureGroups = max(featureClusteringResult$group)
df = model[[7]] %>% mutate(timepoint = rep(model[[3]]$days, nrow(model[[1]])), subject = rep(model[[1]]$subject, each=nrow(model[[3]]))) %>% pivot_longer(-c(timepoint,subject))
plotSubjects = subjectClusteringResult %>% filter(group == subjectGroup) %>% select(subject) %>% pull
plot = df %>% left_join(featureClusteringResult, by=c("name" = "asv")) %>% filter(subject %in% plotSubjects, group %in% 1:numFeatureGroups) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(group))) + geom_boxplot() + geom_hline(yintercept=0, linetype=3) + ggtitle(paste0("Subject group ", subjectGroup))
return(plot)
}
plotResponsePerFeatureGroup = function(model, featureClusteringResult, subjectClusteringResult, featureGroup){
numSubjectGroups = max(subjectClusteringResult$group)
df = model[[7]] %>% mutate(timepoint = rep(model[[3]]$days, nrow(model[[1]])), subject = rep(model[[1]]$subject, each=nrow(model[[3]]))) %>% pivot_longer(-c(timepoint,subject))
plotFeatures = featureClusteringResult %>% filter(group == featureGroup) %>% select(asv) %>% pull
plot = df %>% left_join(subjectClusteringResult) %>% filter(name %in% plotFeatures, group %in% 1:numSubjectGroups) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(group))) + geom_boxplot() + geom_hline(yintercept=0, linetype=3) + ggtitle(paste0("Feature group ", featureGroup))
return(plot)
}
metaPlot = function(model, featureClustering, subjectClustering){
plotList = list()
numFeatureGroups = max(featureClustering$group)
numSubjectGroups = max(subjectClustering$group)
numComponents = ncol(model[[3]]) - 1
plotIndex = 1
for(i in 1:numSubjectGroups){
plotList[[plotIndex]] = plotResponsePerSubjectGroup(model, featureClustering, subjectClustering, i)
plotIndex = plotIndex + 1
}
for(j in 1:numFeatureGroups){
plotList[[plotIndex]] = plotResponsePerFeatureGroup(model, featureClustering, subjectClustering, j)
plotIndex = plotIndex + 1
}
plotList[[plotIndex]] = plotFeatureClustering(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotList[[plotIndex]] = plotFeatureClustering_meta(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotList[[plotIndex]] = plotSubjectClustering(model, subjectClustering, "Subject loadings")
plotIndex = plotIndex + 1
plotList[[plotIndex]] = plotSubjectClustering_meta(model, subjectClustering, "Subject loadings")
ggarrange(plotlist=plotList)
}
plotFeatureClustering = function(model, featureClustering, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents==1){
plot = featureClustering %>% ggplot(aes(x=Component_1,y=0,col=as.factor(group))) + geom_point() + geom_vline(xintercept=0, linetype=2) + ggtitle(title)
}
else{
plot = featureClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(group))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
}
return(plot)
}
plotFeatureClustering_meta = function(model, featureClustering, title){
numComponents = ncol(model[[3]]) - 1
if(numComponents==1){
plot = featureClustering %>% ggplot(aes(x=Component_1,y=0,col=as.factor(Phylum))) + geom_point() + geom_vline(xintercept=0, linetype=2) + ggtitle(title)
}
else{
plot = featureClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(Phylum))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
}
return(plot)
}
checkRawData = function(df, model, subjectClustering, featureClustering){
numSubjectGroups = max(subjectClustering$group)
numFeatureGroups = max(featureClustering$group)
plotlist = list()
plotIndex = 1
for(i in 1:numSubjectGroups){
subjectGroup = subjectClustering %>% filter(group == i) %>% select(subject) %>% pull
plotlist[[plotIndex]] = df %>% pivot_longer(-c(subject,timepoint)) %>% left_join(featureClustering, by=c("name"="asv")) %>% filter(subject %in% subjectGroup, group %in% 1:numFeatureGroups) %>% ggplot(aes(x=as.factor(timepoint), y=value, fill=as.factor(group))) + geom_boxplot() + ggtitle(paste0("Subject group ", i))
plotIndex = plotIndex + 1
}
for(j in 1:numFeatureGroups){
featureGroup = featureClustering %>% filter(group == j) %>% select(asv) %>% pull
plotlist[[plotIndex]] = df %>% pivot_longer(-c(subject,timepoint)) %>% left_join(subjectClustering) %>% filter(name %in% featureGroup, group %in% 1:numSubjectGroups) %>% ggplot(aes(x=as.factor(timepoint), y=value, fill=as.factor(group))) + geom_boxplot() + ggtitle(paste0("Feature group ", j))
plotIndex = plotIndex + 1
}
plotlist[[plotIndex]] = plotFeatureClustering(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotFeatureClustering_meta(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotSubjectClustering(model, subjectClustering, "Subject loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotSubjectClustering_meta(model, subjectClustering, "Subject loadings")
ggarrange(plotlist=plotlist)
}
tongueSubjectVarExps = varexp_subjects(tongueModel)
lowlingSubjectVarExps = varexp_subjects(lowlingModel)
lowinterSubjectVarExps = varexp_subjects(lowinterModel)
uplingSubjectVarExps = varexp_subjects(uplingModel)
upinterSubjectVarExps = varexp_subjects(upinterModel)
salivaSubjectVarExps = varexp_subjects(salivaModel)
metabolomicsSubjectVarExps = varexp_subjects(metabolomicsModel)
tongueFeatureVarExps = varexp_features(tongueModel, "asv")
lowlingFeatureVarExps = varexp_features(lowlingModel, "asv")
lowinterFeatureVarExps = varexp_features(lowinterModel, "asv")
uplingFeatureVarExps = varexp_features(uplingModel, "asv")
upinterFeatureVarExps = varexp_features(upinterModel, "asv")
salivaFeatureVarExps = varexp_features(salivaModel, "asv")
metabolomicsFeatureVarExps = varexp_features(metabolomicsModel, "BIOCHEMICAL")
loadCongruences = function(path, nameVector){
df = read.csv(path, header=FALSE)
numComponents = ncol(df)
colnames(df) = paste0("Congruence_", 1:numComponents)
row.names(df) = nameVector
return(df)
}
tongueSubjectCongruences = loadCongruences("./Tongue_individual_congruence_loadings.csv", tongueModel[[1]]$subject)
lowlingSubjectCongruences = loadCongruences("./Low_ling_individual_congruence_loadings.csv", lowlingModel[[1]]$subject)
lowinterSubjectCongruences = loadCongruences("./Low_inter_individual_congruence_loadings.csv", lowinterModel[[1]]$subject)
uplingSubjectCongruences = loadCongruences("./Up_ling_individual_congruence_loadings.csv", uplingModel[[1]]$subject)
upinterSubjectCongruences = loadCongruences("./Up_inter_individual_congruence_loadings.csv", upinterModel[[1]]$subject)
salivaSubjectCongruences = loadCongruences("./Saliva_individual_congruence_loadings.csv", salivaModel[[1]]$subject)
metabolomicsSubjectCongruences = loadCongruences("./Metabolomics_individual_congruence_loadings.csv", metabolomicsModel[[1]]$subject)
tongueFeatureCongruences = loadCongruences("./Tongue_feature_congruence_loadings.csv", tongueModel[[2]]$asv)
lowlingFeatureCongruences = loadCongruences("./Low_ling_feature_congruence_loadings.csv", lowlingModel[[2]]$asv)
lowinterFeatureCongruences = loadCongruences("./Low_inter_feature_congruence_loadings.csv", lowinterModel[[2]]$asv)
uplingFeatureCongruences = loadCongruences("./Up_ling_feature_congruence_loadings.csv", uplingModel[[2]]$asv)
upinterFeatureCongruences = loadCongruences("./Up_inter_feature_congruence_loadings.csv", upinterModel[[2]]$asv)
salivaFeatureCongruences = loadCongruences("./Saliva_feature_congruence_loadings.csv", salivaModel[[2]]$asv)
metabolomicsFeatureCongruences = loadCongruences("./Metabolomics_feature_congruence_loadings.csv", metabolomicsModel[[2]]$BIOCHEMICAL)
a = featureLoadingLoadingPlot_varExp(tongueModel, "tongue")
b = featureLoadingLoadingPlot_varExp(lowlingModel, "lowling")
c = featureLoadingLoadingPlot_varExp(lowinterModel, "lowinter")
d = featureLoadingLoadingPlot_varExp(uplingModel, "upling")
e = featureLoadingLoadingPlot_varExp(upinterModel, "upinter")
f = featureLoadingLoadingPlot_varExp(salivaModel, "saliva")
ggarrange(a,b,c,d,e,f,common.legend=TRUE)
featureLoadingLoadingPlot_varExp(metabolomicsModel, "metabolomics")
a = congruencePlot_features(tongueFeatureCongruences, tongueModel, "tongue")
b = congruencePlot_features(lowlingFeatureCongruences, lowlingModel, "lowling")
c = congruencePlot_features(lowinterFeatureCongruences, lowinterModel, "lowinter")
d = congruencePlot_features(uplingFeatureCongruences, uplingModel, "upling")
e = congruencePlot_features(upinterFeatureCongruences, upinterModel, "upinter")
f = congruencePlot_features(salivaFeatureCongruences, salivaModel, "saliva")
ggarrange(a,b,c,d,e,f)
congruencePlot_features(metabolomicsFeatureCongruences, metabolomicsModel, "metabolomics")
microbiomeFilter = 1 # this is one times the varExp of the entire model
metabolomeFilter = 2 # this is two times the varExp of the entire model
tongueFilteredFeatures_varexp = filterFeatures(tongueModel, microbiomeFilter)
lowlingFilteredFeatures_varexp = filterFeatures(lowlingModel, microbiomeFilter)
lowinterFilteredFeatures_varexp = filterFeatures(lowinterModel, microbiomeFilter)
uplingFilteredFeatures_varexp = filterFeatures(uplingModel, microbiomeFilter)
upinterFilteredFeatures_varexp = filterFeatures(upinterModel, microbiomeFilter)
salivaFilteredFeatures_varexp = filterFeatures(salivaModel, microbiomeFilter)
metabolomicsFilteredFeatures_varexp = filterFeatures(metabolomicsModel, metabolomeFilter)
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures_varexp, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures_varexp, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures_varexp, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures_varexp, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures_varexp, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures_varexp, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures_varexp
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
microbiomeFilter = 0.4 # this is having a congruence of 0.4 in either component
metabolomeFilter = 0.4 # this is having a congruence of 0.4 in either component
tongueFilteredFeatures_congruence = filterByCongruence(tongueFeatureCongruences, tongueModel[[2]]$asv, "featureName", microbiomeFilter)
lowlingFilteredFeatures_congruence = filterByCongruence(lowlingFeatureCongruences, lowlingModel[[2]]$asv, "featureName", microbiomeFilter)
lowinterFilteredFeatures_congruence = filterByCongruence(lowinterFeatureCongruences, lowinterModel[[2]]$asv, "featureName", microbiomeFilter)
uplingFilteredFeatures_congruence = filterByCongruence(uplingFeatureCongruences, uplingModel[[2]]$asv, "featureName", microbiomeFilter)
upinterFilteredFeatures_congruence = filterByCongruence(upinterFeatureCongruences, upinterModel[[2]]$asv, "featureName", microbiomeFilter)
salivaFilteredFeatures_congruence = filterByCongruence(salivaFeatureCongruences, salivaModel[[2]]$asv, "featureName", microbiomeFilter)
metabolomicsFilteredFeatures_congruence = filterByCongruence(metabolomicsFeatureCongruences, metabolomicsModel[[2]]$BIOCHEMICAL, "featureName", metabolomeFilter)
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures_congruence, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures_congruence, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures_congruence, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures_congruence, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures_congruence, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures_congruence, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures_congruence
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
tongueFilteredFeatures = tongueFilteredFeatures_varexp %>% mutate(keep = (tongueFilteredFeatures_varexp$keep==TRUE & tongueFilteredFeatures_congruence$keep==TRUE))
lowlingFilteredFeatures = lowlingFilteredFeatures_varexp %>% mutate(keep = (lowlingFilteredFeatures_varexp$keep==TRUE & lowlingFilteredFeatures_congruence$keep==TRUE))
lowinterFilteredFeatures = lowinterFilteredFeatures_varexp %>% mutate(keep = (lowinterFilteredFeatures_varexp$keep==TRUE & lowinterFilteredFeatures_congruence$keep==TRUE))
uplingFilteredFeatures = uplingFilteredFeatures_varexp %>% mutate(keep = (uplingFilteredFeatures_varexp$keep==TRUE & uplingFilteredFeatures_congruence$keep==TRUE))
upinterFilteredFeatures = upinterFilteredFeatures_varexp %>% mutate(keep = (upinterFilteredFeatures_varexp$keep==TRUE & upinterFilteredFeatures_congruence$keep==TRUE))
salivaFilteredFeatures = salivaFilteredFeatures_varexp %>% mutate(keep = (salivaFilteredFeatures_varexp$keep==TRUE & salivaFilteredFeatures_congruence$keep==TRUE))
metabolomicsFilteredFeatures = metabolomicsFilteredFeatures_varexp %>% mutate(keep = (metabolomicsFilteredFeatures_varexp$keep==TRUE & metabolomicsFilteredFeatures_congruence$keep==TRUE))
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
labelledFilteredFeaturesPlot = function(model, filteredFeatures, title){
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by=c("asv" = "featureName")) %>% filter(keep==TRUE) %>% left_join(HOMD_mapping)
if(numComponents == 1){
plot = df %>% ggplot(aes(x=Component_1, y=0, col=as.factor(Phylum), label=homd)) + geom_point() + geom_text_repel(col="black") + ggtitle(title)
}
else{
plot = df %>% ggplot(aes(x=Component_1, y=Component_2, col=as.factor(Phylum), label=homd)) + geom_point() + geom_text_repel(col="black", max.overlaps=50) + ggtitle(title)
}
return(plot)
}
labelledFilteredFeaturesPlot(tongueModel, tongueFilteredFeatures, "tongue")
tongueFeatureClustering = clusterFeatureLoadings_filtered(tongueModel, tongueFilteredFeatures, 2)
a = plotFeatureClustering(tongueModel, tongueFeatureClustering, "tongue")
b = plotFeatureClustering_meta(tongueModel, tongueFeatureClustering, "tongue")
ggarrange(a,b)
lowlingFeatureClustering = clusterFeatureLoadings_filtered(lowlingModel, lowlingFilteredFeatures, 2)
a = plotFeatureClustering(lowlingModel, lowlingFeatureClustering, "lowling")
b = plotFeatureClustering_meta(lowlingModel, lowlingFeatureClustering, "lowling")
ggarrange(a,b)
lowinterFeatureClustering = clusterFeatureLoadings_filtered(lowinterModel, lowinterFilteredFeatures, 1)
a = plotFeatureClustering(lowinterModel, lowinterFeatureClustering, "lowinter")
b = plotFeatureClustering_meta(lowinterModel, lowinterFeatureClustering, "lowinter")
ggarrange(a,b)
uplingFeatureClustering = clusterFeatureLoadings_filtered(uplingModel, uplingFilteredFeatures, 2)
a = plotFeatureClustering(uplingModel, uplingFeatureClustering, "upling")
b = plotFeatureClustering_meta(uplingModel, uplingFeatureClustering, "upling")
ggarrange(a,b)
upinterFeatureClustering = clusterFeatureLoadings_filtered(upinterModel, upinterFilteredFeatures, 3)
a = plotFeatureClustering(upinterModel, upinterFeatureClustering, "upinter")
b = plotFeatureClustering_meta(upinterModel, upinterFeatureClustering, "upinter")
ggarrange(a,b)
salivaFeatureClustering = clusterFeatureLoadings_filtered(salivaModel, salivaFilteredFeatures, 2)
a = plotFeatureClustering(salivaModel, salivaFeatureClustering, "saliva")
b = plotFeatureClustering_meta(salivaModel, salivaFeatureClustering, "saliva")
ggarrange(a,b)
model = metabolomicsModel
numClusters = 2
filteredFeatures = metabolomicsFilteredFeatures
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName")) %>% filter(keep == 1)
result = df
df = df %>% select(Component_1, Component_2) %>% as.matrix()
result$group = kmeans(df, numClusters, nstart=50)$cluster
metabolomicsFeatureClustering = result
a = plotFeatureClustering(metabolomicsModel, metabolomicsFeatureClustering, "metabolomics")
model = metabolomicsModel
featureClustering = metabolomicsFeatureClustering
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
b = featureClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(SUPER_PATHWAY))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
ggarrange(a,b)
tongueFeatureClustering
tongueFeatureClustering %>% filter(Component_2 > 0.06 & Component_2 < 0.1)
tongueFeatureClustering %>% filter(Component_2 > 0.06 & Component_2 < 0.1 & Component_1 < -0.06 & Component_1 > -0.1)
tongueFeatureClustering %>% filter(Component_2 > 0.06 & Component_2 < 0.1 & Component_1 < -0.06 & Component_1 > -0.1) %>% select(asv) %>% pull
tongueModel[[7]]
tongueModel[[7]] %>% select(ASV106, ASV145)
tongueModel[[7]] %>% select(ASV106, ASV145) %>% ggplot(aes(x=ASV106,y=ASV145)) + geom_point()
tongueModel[[7]] %>% mutate(timepoint = rep(1:7, tongueModel[[1]])) %>% filter(timepoint==1) %>% select(ASV106, ASV145) %>% ggplot(aes(x=ASV106,y=ASV145)) + geom_point()
tongueModel[[7]] %>% mutate(timepoint = rep(1:7, nrow(tongueModel[[1]]))) %>% filter(timepoint==1) %>% select(ASV106, ASV145) %>% ggplot(aes(x=ASV106,y=ASV145)) + geom_point()
tongueModel[[7]] %>% mutate(timepoint = rep(1:7, nrow(tongueModel[[1]]))) %>% filter(timepoint==7) %>% select(ASV106, ASV145) %>% ggplot(aes(x=ASV106,y=ASV145)) + geom_point()
tongueSubjectClustering
tongueFeatureClustering
tongueModel[[7]] %>% mutate(timepoint = rep(1:7, nrow(tongueModel[[1]]))) %>% filter(timepoint==7) %>% select(ASV1, ASV16) %>% ggplot(aes(x=ASV106,y=ASV145)) + geom_point()
tongueModel[[7]] %>% mutate(timepoint = rep(1:7, nrow(tongueModel[[1]]))) %>% filter(timepoint==7) %>% select(ASV1, ASV16) %>% ggplot(aes(x=ASV1,y=ASV16)) + geom_point()
tongueSubjectClustering = clusterSubjectLoadings_filtered(tongueModel, tongueFilteredSubjects, 1)
