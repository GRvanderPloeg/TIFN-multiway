}
checkRawData = function(df, model, subjectClustering, featureClustering){
numSubjectGroups = max(subjectClustering$group)
numFeatureGroups = max(featureClustering$group)
plotlist = list()
plotIndex = 1
for(i in 1:numSubjectGroups){
subjectGroup = subjectClustering %>% filter(group == i) %>% select(subject) %>% pull
plotlist[[plotIndex]] = df %>% pivot_longer(-c(subject,timepoint)) %>% left_join(featureClustering, by=c("name"="asv")) %>% filter(subject %in% subjectGroup, group %in% 1:numFeatureGroups) %>% ggplot(aes(x=as.factor(timepoint), y=value, fill=as.factor(group))) + geom_boxplot() + ggtitle(paste0("Subject group ", i))
plotIndex = plotIndex + 1
}
for(j in 1:numFeatureGroups){
featureGroup = featureClustering %>% filter(group == j) %>% select(asv) %>% pull
plotlist[[plotIndex]] = df %>% pivot_longer(-c(subject,timepoint)) %>% left_join(subjectClustering) %>% filter(name %in% featureGroup, group %in% 1:numSubjectGroups) %>% ggplot(aes(x=as.factor(timepoint), y=value, fill=as.factor(group))) + geom_boxplot() + ggtitle(paste0("Feature group ", j))
plotIndex = plotIndex + 1
}
plotlist[[plotIndex]] = plotFeatureClustering(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotFeatureClustering_meta(model, featureClustering, "Feature loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotSubjectClustering(model, subjectClustering, "Subject loadings")
plotIndex = plotIndex + 1
plotlist[[plotIndex]] = plotSubjectClustering_meta(model, subjectClustering, "Subject loadings")
ggarrange(plotlist=plotlist)
}
tongueSubjectVarExps = varexp_subjects(tongueModel)
lowlingSubjectVarExps = varexp_subjects(lowlingModel)
lowinterSubjectVarExps = varexp_subjects(lowinterModel)
uplingSubjectVarExps = varexp_subjects(uplingModel)
upinterSubjectVarExps = varexp_subjects(upinterModel)
salivaSubjectVarExps = varexp_subjects(salivaModel)
metabolomicsSubjectVarExps = varexp_subjects(metabolomicsModel)
tongueFeatureVarExps = varexp_features(tongueModel, "asv")
lowlingFeatureVarExps = varexp_features(lowlingModel, "asv")
lowinterFeatureVarExps = varexp_features(lowinterModel, "asv")
uplingFeatureVarExps = varexp_features(uplingModel, "asv")
upinterFeatureVarExps = varexp_features(upinterModel, "asv")
salivaFeatureVarExps = varexp_features(salivaModel, "asv")
metabolomicsFeatureVarExps = varexp_features(metabolomicsModel, "BIOCHEMICAL")
loadCongruences = function(path, nameVector){
df = read.csv(path, header=FALSE)
numComponents = ncol(df)
colnames(df) = paste0("Congruence_", 1:numComponents)
row.names(df) = nameVector
return(df)
}
tongueSubjectCongruences = loadCongruences("./Tongue_individual_congruence_loadings.csv", tongueModel[[1]]$subject)
lowlingSubjectCongruences = loadCongruences("./Low_ling_individual_congruence_loadings.csv", lowlingModel[[1]]$subject)
lowinterSubjectCongruences = loadCongruences("./Low_inter_individual_congruence_loadings.csv", lowinterModel[[1]]$subject)
uplingSubjectCongruences = loadCongruences("./Up_ling_individual_congruence_loadings.csv", uplingModel[[1]]$subject)
upinterSubjectCongruences = loadCongruences("./Up_inter_individual_congruence_loadings.csv", upinterModel[[1]]$subject)
salivaSubjectCongruences = loadCongruences("./Saliva_individual_congruence_loadings.csv", salivaModel[[1]]$subject)
metabolomicsSubjectCongruences = loadCongruences("./Metabolomics_individual_congruence_loadings.csv", metabolomicsModel[[1]]$subject)
tongueFeatureCongruences = loadCongruences("./Tongue_feature_congruence_loadings.csv", tongueModel[[2]]$asv)
lowlingFeatureCongruences = loadCongruences("./Low_ling_feature_congruence_loadings.csv", lowlingModel[[2]]$asv)
lowinterFeatureCongruences = loadCongruences("./Low_inter_feature_congruence_loadings.csv", lowinterModel[[2]]$asv)
uplingFeatureCongruences = loadCongruences("./Up_ling_feature_congruence_loadings.csv", uplingModel[[2]]$asv)
upinterFeatureCongruences = loadCongruences("./Up_inter_feature_congruence_loadings.csv", upinterModel[[2]]$asv)
salivaFeatureCongruences = loadCongruences("./Saliva_feature_congruence_loadings.csv", salivaModel[[2]]$asv)
metabolomicsFeatureCongruences = loadCongruences("./Metabolomics_feature_congruence_loadings.csv", metabolomicsModel[[2]]$BIOCHEMICAL)
a = featureLoadingLoadingPlot_varExp(tongueModel, "tongue")
b = featureLoadingLoadingPlot_varExp(lowlingModel, "lowling")
c = featureLoadingLoadingPlot_varExp(lowinterModel, "lowinter")
d = featureLoadingLoadingPlot_varExp(uplingModel, "upling")
e = featureLoadingLoadingPlot_varExp(upinterModel, "upinter")
f = featureLoadingLoadingPlot_varExp(salivaModel, "saliva")
ggarrange(a,b,c,d,e,f,common.legend=TRUE)
featureLoadingLoadingPlot_varExp(metabolomicsModel, "metabolomics")
a = congruencePlot_features(tongueFeatureCongruences, tongueModel, "tongue")
b = congruencePlot_features(lowlingFeatureCongruences, lowlingModel, "lowling")
c = congruencePlot_features(lowinterFeatureCongruences, lowinterModel, "lowinter")
d = congruencePlot_features(uplingFeatureCongruences, uplingModel, "upling")
e = congruencePlot_features(upinterFeatureCongruences, upinterModel, "upinter")
f = congruencePlot_features(salivaFeatureCongruences, salivaModel, "saliva")
ggarrange(a,b,c,d,e,f)
congruencePlot_features(metabolomicsFeatureCongruences, metabolomicsModel, "metabolomics")
microbiomeFilter = 1 # this is one times the varExp of the entire model
metabolomeFilter = 2 # this is two times the varExp of the entire model
tongueFilteredFeatures_varexp = filterFeatures(tongueModel, microbiomeFilter)
lowlingFilteredFeatures_varexp = filterFeatures(lowlingModel, microbiomeFilter)
lowinterFilteredFeatures_varexp = filterFeatures(lowinterModel, microbiomeFilter)
uplingFilteredFeatures_varexp = filterFeatures(uplingModel, microbiomeFilter)
upinterFilteredFeatures_varexp = filterFeatures(upinterModel, microbiomeFilter)
salivaFilteredFeatures_varexp = filterFeatures(salivaModel, microbiomeFilter)
metabolomicsFilteredFeatures_varexp = filterFeatures(metabolomicsModel, metabolomeFilter)
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures_varexp, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures_varexp, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures_varexp, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures_varexp, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures_varexp, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures_varexp, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures_varexp
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
microbiomeFilter = 0.4 # this is having a congruence of 0.4 in either component
metabolomeFilter = 0.4 # this is having a congruence of 0.4 in either component
tongueFilteredFeatures_congruence = filterByCongruence(tongueFeatureCongruences, tongueModel[[2]]$asv, "featureName", microbiomeFilter)
lowlingFilteredFeatures_congruence = filterByCongruence(lowlingFeatureCongruences, lowlingModel[[2]]$asv, "featureName", microbiomeFilter)
lowinterFilteredFeatures_congruence = filterByCongruence(lowinterFeatureCongruences, lowinterModel[[2]]$asv, "featureName", microbiomeFilter)
uplingFilteredFeatures_congruence = filterByCongruence(uplingFeatureCongruences, uplingModel[[2]]$asv, "featureName", microbiomeFilter)
upinterFilteredFeatures_congruence = filterByCongruence(upinterFeatureCongruences, upinterModel[[2]]$asv, "featureName", microbiomeFilter)
salivaFilteredFeatures_congruence = filterByCongruence(salivaFeatureCongruences, salivaModel[[2]]$asv, "featureName", microbiomeFilter)
metabolomicsFilteredFeatures_congruence = filterByCongruence(metabolomicsFeatureCongruences, metabolomicsModel[[2]]$BIOCHEMICAL, "featureName", metabolomeFilter)
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures_congruence, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures_congruence, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures_congruence, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures_congruence, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures_congruence, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures_congruence, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures_congruence
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
tongueFilteredFeatures = tongueFilteredFeatures_varexp %>% mutate(keep = (tongueFilteredFeatures_varexp$keep==TRUE & tongueFilteredFeatures_congruence$keep==TRUE))
lowlingFilteredFeatures = lowlingFilteredFeatures_varexp %>% mutate(keep = (lowlingFilteredFeatures_varexp$keep==TRUE & lowlingFilteredFeatures_congruence$keep==TRUE))
lowinterFilteredFeatures = lowinterFilteredFeatures_varexp %>% mutate(keep = (lowinterFilteredFeatures_varexp$keep==TRUE & lowinterFilteredFeatures_congruence$keep==TRUE))
uplingFilteredFeatures = uplingFilteredFeatures_varexp %>% mutate(keep = (uplingFilteredFeatures_varexp$keep==TRUE & uplingFilteredFeatures_congruence$keep==TRUE))
upinterFilteredFeatures = upinterFilteredFeatures_varexp %>% mutate(keep = (upinterFilteredFeatures_varexp$keep==TRUE & upinterFilteredFeatures_congruence$keep==TRUE))
salivaFilteredFeatures = salivaFilteredFeatures_varexp %>% mutate(keep = (salivaFilteredFeatures_varexp$keep==TRUE & salivaFilteredFeatures_congruence$keep==TRUE))
metabolomicsFilteredFeatures = metabolomicsFilteredFeatures_varexp %>% mutate(keep = (metabolomicsFilteredFeatures_varexp$keep==TRUE & metabolomicsFilteredFeatures_congruence$keep==TRUE))
# Plot the result
a = featureLoadingLoadingPlot_filtered(tongueModel, tongueFilteredFeatures, "tongue")
b = featureLoadingLoadingPlot_filtered(lowlingModel, lowlingFilteredFeatures, "lowling")
c = featureLoadingLoadingPlot_filtered(lowinterModel, lowinterFilteredFeatures, "lowinter")
d = featureLoadingLoadingPlot_filtered(uplingModel, uplingFilteredFeatures, "upling")
e = featureLoadingLoadingPlot_filtered(upinterModel, upinterFilteredFeatures, "upinter")
f = featureLoadingLoadingPlot_filtered(salivaModel, salivaFilteredFeatures, "saliva")
ggarrange(a,b,c,d,e,f, common.legend=TRUE)
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName"))
df %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(keep))) + geom_point() + ggtitle(title)
labelledFilteredFeaturesPlot = function(model, filteredFeatures, title){
numComponents = ncol(model[[3]]) - 1
df = model[[2]] %>% left_join(filteredFeatures, by=c("asv" = "featureName")) %>% filter(keep==TRUE) %>% left_join(HOMD_mapping)
if(numComponents == 1){
plot = df %>% ggplot(aes(x=Component_1, y=0, col=as.factor(Phylum), label=homd)) + geom_point() + geom_text_repel(col="black") + ggtitle(title)
}
else{
plot = df %>% ggplot(aes(x=Component_1, y=Component_2, col=as.factor(Phylum), label=homd)) + geom_point() + geom_text_repel(col="black", max.overlaps=50) + ggtitle(title)
}
return(plot)
}
labelledFilteredFeaturesPlot(tongueModel, tongueFilteredFeatures, "tongue")
labelledFilteredFeaturesPlot(lowlingModel, lowlingFilteredFeatures, "lowling")
labelledFilteredFeaturesPlot(lowinterModel, lowinterFilteredFeatures, "lowinter")
labelledFilteredFeaturesPlot(uplingModel, uplingFilteredFeatures, "upling")
labelledFilteredFeaturesPlot(upinterModel, upinterFilteredFeatures, "upinter")
labelledFilteredFeaturesPlot(salivaModel, salivaFilteredFeatures, "saliva")
model = metabolomicsModel
filteredFeatures = metabolomicsFilteredFeatures
df = model[[2]] %>% left_join(filteredFeatures, by=c("BIOCHEMICAL" = "featureName")) %>% filter(keep==TRUE)
plot = df %>% ggplot(aes(x=Component_1, y=Component_2, col=as.factor(SUPER_PATHWAY), label=BIOCHEMICAL)) + geom_point() + geom_text_repel(col="black") + ggtitle("Metabolomics")
print(plot)
make_elbow_plot = function(model, filteredFeatures, plotTitle){
set.seed(123)
numComponents = ncol(model[[3]]) - 1
if(numComponents == 1){
df = model[[2]] %>% filter(asv %in% (filteredFeatures %>% filter(keep==TRUE) %>% select(featureName) %>% pull())) %>% select(Component_1)
}
else{
df = model[[2]] %>% filter(asv %in% (filteredFeatures %>% filter(keep==TRUE) %>% select(featureName) %>% pull())) %>% select(Component_1, Component_2)
}
k.max = 10
wss = sapply(1:k.max,
function(k){kmeans(df, k, nstart=50,iter.max = 15 )$tot.withinss})
plottableData = cbind(1:k.max, wss) %>% as_tibble()
colnames(plottableData) = c("numClusters", "WSS")
plottableData %>% ggplot(aes(x=numClusters,y=WSS)) +
geom_point() +
geom_line() +
xlab("Number of clusters K") +
ylab("Total within-clusters sum of squares") +
ggtitle(plotTitle)
}
a = make_elbow_plot(tongueModel, tongueFilteredFeatures, "Tongue")
b = make_elbow_plot(lowlingModel, lowlingFilteredFeatures, "Lowling")
c = make_elbow_plot(lowinterModel, lowinterFilteredFeatures, "Lowinter")
d = make_elbow_plot(uplingModel, uplingFilteredFeatures, "Upling")
e = make_elbow_plot(upinterModel, upinterFilteredFeatures, "Upinter")
f = make_elbow_plot(salivaModel, salivaFilteredFeatures, "Saliva")
ggarrange(a,b,c,d,e,f)
tongueFeatureClustering = clusterFeatureLoadings_filtered(tongueModel, tongueFilteredFeatures, 2)
a = plotFeatureClustering(tongueModel, tongueFeatureClustering, "tongue")
b = plotFeatureClustering_meta(tongueModel, tongueFeatureClustering, "tongue")
ggarrange(a,b)
lowlingFeatureClustering = clusterFeatureLoadings_filtered(lowlingModel, lowlingFilteredFeatures, 2)
a = plotFeatureClustering(lowlingModel, lowlingFeatureClustering, "lowling")
b = plotFeatureClustering_meta(lowlingModel, lowlingFeatureClustering, "lowling")
ggarrange(a,b)
lowinterFeatureClustering = clusterFeatureLoadings_filtered(lowinterModel, lowinterFilteredFeatures, 2)
a = plotFeatureClustering(lowinterModel, lowinterFeatureClustering, "lowinter")
b = plotFeatureClustering_meta(lowinterModel, lowinterFeatureClustering, "lowinter")
ggarrange(a,b)
uplingFeatureClustering = clusterFeatureLoadings_filtered(uplingModel, uplingFilteredFeatures, 3)
a = plotFeatureClustering(uplingModel, uplingFeatureClustering, "upling")
b = plotFeatureClustering_meta(uplingModel, uplingFeatureClustering, "upling")
ggarrange(a,b)
upinterFeatureClustering = clusterFeatureLoadings_filtered(upinterModel, upinterFilteredFeatures, 2)
a = plotFeatureClustering(upinterModel, upinterFeatureClustering, "upinter")
b = plotFeatureClustering_meta(upinterModel, upinterFeatureClustering, "upinter")
ggarrange(a,b)
salivaFeatureClustering = clusterFeatureLoadings_filtered(salivaModel, salivaFilteredFeatures, 2)
a = plotFeatureClustering(salivaModel, salivaFeatureClustering, "saliva")
b = plotFeatureClustering_meta(salivaModel, salivaFeatureClustering, "saliva")
ggarrange(a,b)
model = metabolomicsModel
numClusters = 2
filteredFeatures = metabolomicsFilteredFeatures
df = model[[2]] %>% left_join(filteredFeatures, by = c("BIOCHEMICAL" = "featureName")) %>% filter(keep == 1)
result = df
df = df %>% select(Component_1, Component_2) %>% as.matrix()
result$group = kmeans(df, numClusters, nstart=50)$cluster
metabolomicsFeatureClustering = result
a = plotFeatureClustering(metabolomicsModel, metabolomicsFeatureClustering, "metabolomics")
model = metabolomicsModel
featureClustering = metabolomicsFeatureClustering
title = "metabolomics"
numComponents = ncol(model[[3]]) - 1
b = featureClustering %>% ggplot(aes(x=Component_1,y=Component_2,col=as.factor(SUPER_PATHWAY))) + geom_point() + geom_vline(xintercept=0, linetype=2) + geom_hline(yintercept=0, linetype=2) + ggtitle(title)
ggarrange(a,b)
a = plotFeatureClustering(tongueModel, tongueFeatureClustering, "tongue")
b = plotFeatureClustering(lowlingModel, lowlingFeatureClustering, "lowling")
c = plotFeatureClustering(lowinterModel, lowinterFeatureClustering, "lowinter")
d = plotFeatureClustering(uplingModel, uplingFeatureClustering, "upling")
e = plotFeatureClustering(upinterModel, upinterFeatureClustering, "upinter")
f = plotFeatureClustering(salivaModel, salivaFeatureClustering, "saliva")
ggarrange(a,b,c,d,e,f)
calculateWithinBetweenCorr = function(model, featureClustering){
subjectList = model[[1]]$subject
inputData = model[[7]] %>% mutate(timepoint = rep(model[[3]]$days, nrow(model[[1]])), subject = rep(model[[1]]$subject, each=nrow(model[[3]])))
# Check which ASVs are in which group
ASVgroups = list()
for(i in 1:max(featureClustering$group)){
ASVgroups[[i]] = featureClustering %>% filter(group == i) %>% select(asv) %>% pull()
}
withinCorrelations = list()
betweenCorrelations = list()
for(i in 1:length(subjectList)){
selectedSubject = subjectList[i]
correlations = inputData %>% filter(subject == selectedSubject) %>% select(-subject,-timepoint) %>% cor(use="complete.obs")
corPerGroup = list()
for(j in 1:length(ASVgroups)){
groupResult = correlations[row.names(correlations) %in% ASVgroups[[j]], colnames(correlations) %in% ASVgroups[[j]]]
groupResult = groupResult[upper.tri(groupResult)]
corPerGroup[[j]] = groupResult
}
corOutsideGroup = list()
iterator = 1
for(j in 1:(length(ASVgroups)-1)){
for(k in (j+1):length(ASVgroups)){
outsideResult = correlations[row.names(correlations) %in% ASVgroups[[j]], !colnames(correlations) %in% ASVgroups[[k]]]
outsideResult = outsideResult[upper.tri(outsideResult)]
corOutsideGroup[[iterator]] = outsideResult
iterator = iterator + 1
}
}
withinResult = unlist(corPerGroup)
withinCorrelations[[i]] = withinResult
betweenResult = unlist(corOutsideGroup)
betweenCorrelations[[i]] = betweenResult
}
withinCorrelations = unlist(withinCorrelations)
betweenCorrelations = unlist(betweenCorrelations)
return(list(withinCorrelations, betweenCorrelations))
}
tongueCorrelations = calculateWithinBetweenCorr(tongueModel, tongueFeatureClustering)
lowlingCorrelations = calculateWithinBetweenCorr(lowlingModel, lowlingFeatureClustering)
lowinterCorrelations = calculateWithinBetweenCorr(lowinterModel, lowinterFeatureClustering)
uplingCorrelations = calculateWithinBetweenCorr(uplingModel, uplingFeatureClustering)
upinterCorrelations = calculateWithinBetweenCorr(upinterModel, upinterFeatureClustering)
salivaCorrelations = calculateWithinBetweenCorr(salivaModel, salivaFeatureClustering)
plotCorrelationResult = function(correlationResult){
partA = correlationResult[[1]] %>% as_tibble() %>% mutate(comparison = "within")
partB = correlationResult[[2]] %>% as_tibble() %>% mutate(comparison = "between")
df = rbind(partA, partB)
df %>% ggplot(aes(x=as.factor(comparison),y=value)) + geom_boxplot()
}
a=plotCorrelationResult(tongueCorrelations)
b=plotCorrelationResult(lowlingCorrelations)
c=plotCorrelationResult(lowinterCorrelations)
d=plotCorrelationResult(uplingCorrelations)
e=plotCorrelationResult(upinterCorrelations)
f=plotCorrelationResult(salivaCorrelations)
ggarrange(a,b,c,d,e,f, nrow=3, ncol=2)
testExclusivity = function(microbiome.raw, nicheName, featureClustering, minReads=10, presenceFrac=0.5){
numGroups = max(featureClustering$group)
numCombinations = 2**numGroups - numGroups - 1
df = microbiome.raw %>% as_tibble() %>% filter(group == "control", niche == nicheName) %>% select(-sample, -group, -niche)
df.numeric = df[,3:ncol(df)]
results = list()
for(i in 1:max(featureClustering$group)){
dummy =  df.numeric %>% select(featureClustering %>% filter(group == i) %>% select(asv) %>% pull())
dummy = dummy > minReads
dummy = rowSums(dummy) / ncol(dummy)
#dummy = apply(dummy, 1, mean)
results[[i]] = dummy
}
presenceAbsence = as.data.frame(do.call(cbind, results))
presenceAbsence = presenceAbsence > presenceFrac
allResults = list()
summaryPvalues = list()
testResults = list()
summaryIterator = 1
for(i in 1:(numGroups-1)){
for(j in (i+1):numGroups){
#print(i)
#print(j)
result = matrix(c(sum(presenceAbsence[,i] & presenceAbsence[,j]), sum(!presenceAbsence[,i] & presenceAbsence[,j]), sum(presenceAbsence[,i] & !presenceAbsence[,j]), sum(!presenceAbsence[,i] & !presenceAbsence[,j])), nrow=2, ncol=2)
#print(result)
testResult = fisher.test(result, alternative="less")
#print(testResult)
#print("-------------------------------------------")
allResults[[summaryIterator]] = result
testResults[[summaryIterator]] = testResult
summaryPvalues[summaryIterator] = testResult$p.value
summaryIterator = summaryIterator + 1
}
}
return(list(presenceAbsence,allResults, testResults, unlist(summaryPvalues)))
}
tongueExclusivity = testExclusivity(microbiome.raw, "tongue", tongueFeatureClustering)
lowlingExclusivity = testExclusivity(microbiome.raw, "lower jaw, lingual", lowlingFeatureClustering)
lowinterExclusivity = testExclusivity(microbiome.raw, "lower jaw, interproximal", lowinterFeatureClustering)
uplingExclusivity = testExclusivity(microbiome.raw, "upper jaw, lingual", uplingFeatureClustering)
upinterExclusivity = testExclusivity(microbiome.raw, "upper jaw, interproximal", upinterFeatureClustering)
salivaExclusivity = testExclusivity(microbiome.raw, "saliva", salivaFeatureClustering)
makeMicrobiomeExclusivityVenn = function(exclusivityResult, path){
setList = list()
presenceAbsence = exclusivityResult[[1]] %>% as_tibble() %>% mutate(index=1:nrow(.))
for(i in 1:(ncol(presenceAbsence)-1)){
setList[[i]] = presenceAbsence[presenceAbsence[,i] %>% pull(),] %>% select(index) %>% pull()
}
venn.diagram(x=setList, category.names=paste0("M",1:length(setList)), filename=path, output=TRUE)
}
makeMicrobiomeExclusivityVenn(tongueExclusivity, "vennTongueExclusivity.png")
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(-subject,-visit,-group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
tongueFilteredSubjects = tongueModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
tongueSubjectClustering = clusterSubjectLoadings_filtered(tongueModel, tongueFilteredSubjects, 3)
a = plotSubjectClustering(tongueModel, tongueSubjectClustering, "tongue")
b = plotSubjectClustering_meta(tongueModel, tongueSubjectClustering, "tongue")
ggarrange(a,b)
lowlingFilteredSubjects = lowlingModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
lowlingSubjectClustering = clusterSubjectLoadings_filtered(lowlingModel, lowlingFilteredSubjects, 2)
a = plotSubjectClustering(lowlingModel, lowlingSubjectClustering, "lowling")
b = plotSubjectClustering_meta(lowlingModel, lowlingSubjectClustering, "lowling")
ggarrange(a,b)
lowinterFilteredSubjects = lowinterModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
lowinterSubjectClustering = clusterSubjectLoadings_filtered(lowinterModel, lowinterFilteredSubjects, 2)
a = plotSubjectClustering(lowinterModel, lowinterSubjectClustering, "lowinter")
b = plotSubjectClustering_meta(lowinterModel, lowinterSubjectClustering, "lowinter")
ggarrange(a,b)
uplingFilteredSubjects = uplingModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
uplingSubjectClustering = clusterSubjectLoadings_filtered(uplingModel, uplingFilteredSubjects, 2)
a = plotSubjectClustering(uplingModel, uplingSubjectClustering, "upling")
b = plotSubjectClustering_meta(uplingModel, uplingSubjectClustering, "upling")
ggarrange(a,b)
upinterFilteredSubjects = upinterModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
upinterSubjectClustering = clusterSubjectLoadings_filtered(upinterModel, upinterFilteredSubjects, 2)
a = plotSubjectClustering(upinterModel, upinterSubjectClustering, "upinter")
b = plotSubjectClustering_meta(upinterModel, upinterSubjectClustering, "upinter")
ggarrange(a,b)
salivaFilteredSubjects = salivaModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
salivaSubjectClustering = clusterSubjectLoadings_filtered(salivaModel, salivaFilteredSubjects, 2)
a = plotSubjectClustering(salivaModel, salivaSubjectClustering, "saliva")
b = plotSubjectClustering_meta(salivaModel, salivaSubjectClustering, "saliva")
ggarrange(a,b)
metabolomicsFilteredSubjects = metabolomicsModel[[1]] %>% mutate(keep = 1) %>% select(subject, keep)
metabolomicsSubjectClustering = clusterSubjectLoadings_filtered(metabolomicsModel, metabolomicsFilteredSubjects, 2)
a = plotSubjectClustering(metabolomicsModel, metabolomicsSubjectClustering, "metabolomics")
b = plotSubjectClustering_meta(metabolomicsModel, metabolomicsSubjectClustering, "metabolomics")
ggarrange(a,b)
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(-subject,-visit,-group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
#colnames(df) = lowlingSubjectClustering %>% arrange(group) %>% select(subject) %>% pull()
df = as.matrix(df)
heatmap.2a(df, trace="none", Rowv=NA, Colv=NA, dendrogram="none")
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(-subject,-visit,-group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
df
df[1:(nrow(df)-1),]
df[1:(nrow(df)-1),] %>% colSums()
df[1:(nrow(df)-1),] %>% colSums() / nrow(df)
df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)
(df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5
1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
1*((df[nrow(df),] %>% colSums() / (nrow(df)-1)) > 0.5)
df[nrow(df),]
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
rbind(rowA, rowB)
temp= rbind(rowA, rowB)
heatmap.2a(temp)
heatmap.2a(temp, trace="none")
temp %>% as_tibble()
temp %>% as_tibble() %>% pivot_longer(everything())
temp %>% as_tibble() %>% mutate(group=1:2)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=name,y=group,fill=value)) + geom_tile()
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=name,y=group,fill=as.factor(value))) + geom_tile()
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=name,y=as.factor(group),fill=as.factor(value))) + geom_tile()
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile()
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + color_fill_manual()
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + color_fill_manual(value=c("1"="#ff0000", "2"="#00ff00"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + color_scale_manual(value=c("1"="#ff0000", "2"="#00ff00"))
?colour
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_color_manual(value=c("1"="#ff0000", "2"="#00ff00"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_color_manual(values=c("1"="#ff0000", "2"="#00ff00"))
?scale_color_manual
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("1"="#ff0000", "2"="#00ff00"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#ff0000", "1"="#00ff00"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(-subject,-visit,-group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(-subject,-visit,-group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("1"="#000000", "0"="#ffffff"))
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
df
presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group)
presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull())
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==1) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
lowlingFeatureClustering
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==2) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=as.factor(name),y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche=="lower jaw, lingual")
microbiome.meta = microbiome.numeric %>% select(subject,visit)
presenceAbsence = microbiome.numeric %>% select(-sample,-subject,-visit,-niche,-group)
presenceAbsence = presenceAbsence > 0
presenceAbsence = 1*presenceAbsence
presenceAbsence = presenceAbsence %>% as_tibble() %>% mutate(subject = microbiome.meta$subject, visit = microbiome.meta$visit)
df = presenceAbsence %>% filter(visit==2) %>% left_join(lowlingSubjectClustering) %>% arrange(group) %>% select(lowlingFeatureClustering %>% arrange(group) %>% select(asv) %>% pull()) %>% t()
rowA = 1*((df[1:(nrow(df)-1),] %>% colSums() / (nrow(df)-1)) > 0.5)
rowB = df[nrow(df),]
temp = rbind(rowA, rowB)
temp %>% as_tibble() %>% mutate(group=1:2) %>% pivot_longer(-group) %>% ggplot(aes(x=name,y=as.factor(group),fill=as.factor(value))) + geom_tile() + scale_fill_manual(values=c("0"="#000000", "1"="#ffffff"))
setwd("~/Github/TIFN/Homogenized data analysis/10. Alpha diversity and PQN effect")
